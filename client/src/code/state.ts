// App imports.
import * as Items from "./LostItems";
import { config } from "./config";
import * as SMTP from "./SMTP";


/**
 * This function must be called once and only once from BaseLayout.
 */
export function createState(inParentComponent) {

  return {


    // Flag: Is the please wait dialog visible?
    pleaseWaitVisible : false,

    // List of items.
    items : [ ],

    // List of mailboxes.
    mailboxes : [ ],

    // List of messages in the current mailbox.
    messages : [ ],

    // The view that is currently showing ("welcome", "message", "compose", "item" or "itemAdd").
    currentView : "welcome",

    // The currently selected mailbox, if any.
    currentMailbox : null,

    // The details of the message currently being viewed or composed, if any.
    messageID : null,
    messageDate : null,
    messageFrom : null,
    messageTo : null,
    messageSubject : null,
    messageBody : null,

    // The details of the item currently being viewed or added, if any.
    itemID : null,
    itemName : null,
    itemEmail : null,


    // ------------------------------------------------------------------------------------------------
    // ------------------------------------ View Switch functions -------------------------------------
    // ------------------------------------------------------------------------------------------------


    /**
     * Shows or hides the please wait dialog during server calls.
     *
     * @param inVisible True to show the dialog, false to hide it.
     */
    showHidePleaseWait : function(inVisible: boolean): void {

      this.setState({ pleaseWaitVisible : inVisible });

    }.bind(inParentComponent), /* End showHidePleaseWait(). */



    showItems : function(inID: string, inName: string, inEmail: string): void {

      console.log("state.showItem()", inID, inName, inEmail);

      this.setState({ currentView : "item", itemID : inID, itemName : inName, itemEmail : inEmail });

    }.bind(inParentComponent), /* End showitem(). */


    /**
     * Show itemView in add mode.
     */
    showAdditem : function(): void {

      console.log("state.showAdditem()");

      this.setState({ currentView : "itemAdd", itemID : null, itemName : "", itemEmail : "" });

    }.bind(inParentComponent), /* End showAdditem(). */








    // ------------------------------------------------------------------------------------------------
    // ---------------------------------------- List functions ----------------------------------------
    // ------------------------------------------------------------------------------------------------


 


    /**
     * Add a item to the list of items.
     *
     * @param initem A item descriptor object.
     */
    addItemToList : function(inItem: Items.IItem): void {

      console.log("state.addItemToList()", inItem);

      // Copy list.
      const cl = this.state.items.slice(0);

      // Add new element.
      cl.push({ _id : inItem._id, name : inItem.name, description : inItem.description, email : inItem.email });

      // Update list in state.
      this.setState({ items : cl });

    }.bind(inParentComponent), /* End additemToList(). */



    // ------------------------------------------------------------------------------------------------
    // ------------------------------------ Event Handler functions -----------------------------------
    // ------------------------------------------------------------------------------------------------


    /**
     * Fires any time the user types in an editable field.
     *
     * @param inEvent The event object generated by the keypress.
     */
    fieldChangeHandler : function(inEvent: any): void {

      console.log("state.fieldChangeHandler()", inEvent.target.id, inEvent.target.value);

      // Enforce max length for item name.
      if (inEvent.target.id === "itemName" && inEvent.target.value.length > 16) { return; }

      this.setState({ [inEvent.target.id] : inEvent.target.value });

    }.bind(inParentComponent), /* End fieldChangeHandler(). */


    /**
     * Save item.
     */
    saveitem : async function(): Promise<void> {

      console.log("state.saveitem()", this.state.itemID, this.state.itemName, this.state.itemEmail);

      // Copy list.
      const cl = this.state.items.slice(0);

      // Save to server.
      this.state.showHidePleaseWait(true);
      const itemsWorker: Items.Worker = new Items.Worker();
      const item: Items.IItem =
        await itemsWorker.addItem({ name : this.state.itemName, email : this.state.itemEmail });
      this.state.showHidePleaseWait(false);

      // Add to list.
      cl.push(item);

      // Update state.
      this.setState({ items : cl, itemID : null, itemName : "", itemEmail : "" });

    }.bind(inParentComponent), /* End saveitem(). */


    /**
     * Delete the currently viewed item.
     */
    deleteitem : async function(): Promise<void> {

      console.log("state.deleteitem()", this.state.itemID);

      // Delete from server.
      this.state.showHidePleaseWait(true);
      const itemsWorker: Items.Worker = new Items.Worker();
      await itemsWorker.deleteItem(this.state.itemID);
      this.state.showHidePleaseWait(false);

      // Remove from list.
      const cl = this.state.items.filter((inElement) => inElement._id != this.state.itemID);

      // Update state.
      this.setState({ items : cl, itemID : null, itemName : "", itemEmail : "" });

    }.bind(inParentComponent), /* End deleteitem(). */



    /**
     * Delete a message (from the server and the item list).
     */
    sendMessage : async function(): Promise<void> {

      console.log("state.sendMessage()", this.state.messageTo, this.state.messageFrom, this.state.messageSubject,
        this.state.messageBody
      );

      // Send the message.
      this.state.showHidePleaseWait(true);
      const smtpWorker: SMTP.Worker = new SMTP.Worker();
      await smtpWorker.sendMessage(this.state.messageTo, this.state.messageFrom, this.state.messageSubject,
        this.state.messageBody
      );
      this.state.showHidePleaseWait(false);

      // Update state.
      this.setState({ currentView : "welcome" });

    }.bind(inParentComponent) /* End sendMessage(). */


  };

} /* End createState(). */